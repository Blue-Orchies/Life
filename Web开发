Web开发

第一模块：Python基础

一、发展史
1989年圣诞节 =》 Guido von Rossum 开始编写Python语言的编译器
1991年2月 =》 第一个Python编译器诞生
1994年1月 =》 Python 1.0 正式发布
2000年10月16日 =》 Python 2.0 正式发布
2008年12月3日 =》 Python 3.0 正式发布

二、优点
1.语法优美，易上手
2.被广泛应用于数据分析和机器学习领域
3.可移植性高，可以工作于不同的操作系统
4.支持面向对象编程和函数式编程
5.代码严谨，可读性强

三、缺点
1.执行效率低
2.代码无法加密
3.开发框架多

四、应用领域
Web开发、云计算、DevOps、爬虫、自动化测试、数据分析、机器学习等领域。

五、安装Python解释器
Win10：Python官网（python.org） => Python-3.9.0
版本检测：
python sys.py
import sys
print(sys.version)

六、第一行代码
hello.py
"""
第一个Python程序 - hello，world！
向伟大的Dennis M. Ritchie先生致敬

Version：0.1
Author: 季延升
"""
print("hello，world")
# print("你好，世界！")

七、python开发工具
IDLE - 自带的集成开发工具
IPython - 更好的交互式编程工具
Sublime Text - 高级文本编辑器
Visual Studio Code - 微软的开发工具
Pycharm - Python开发神器

八、Python开发（兴趣是最好的老师）
1.Python之禅
import this 
2.trutle绘制国旗
import turtle


def draw_rectangle(x, y, width, height):
    """绘制矩形"""
    turtle.goto(x, y)
    turtle.pencolor('red')
    turtle.fillcolor('red')
    turtle.begin_fill()
    for i in range(2):
        turtle.forward(width)
        turtle.left(90)
        turtle.forward(height)
        turtle.left(90)
    turtle.end_fill()


def draw_star(x, y, radius):
    """绘制五角星"""
    turtle.setpos(x, y)
    pos1 = turtle.pos()
    turtle.circle(-radius, 72)
    pos2 = turtle.pos()
    turtle.circle(-radius, 72)
    pos3 = turtle.pos()
    turtle.circle(-radius, 72)
    pos4 = turtle.pos()
    turtle.circle(-radius, 72)
    pos5 = turtle.pos()
    turtle.color('yellow', 'yellow')
    turtle.begin_fill()
    turtle.goto(pos3)
    turtle.goto(pos1)
    turtle.goto(pos4)
    turtle.goto(pos2)
    turtle.goto(pos5)
    turtle.end_fill()


def main():
    """主程序"""
    turtle.speed(12)
    turtle.penup()
    x, y = -270, -180
    # 画国旗主体
    width, height = 540, 360
    draw_rectangle(x, y, width, height)
    # 画大星星
    pice = 22
    center_x, center_y = x + 5 * pice, y + height - pice * 5
    turtle.goto(center_x, center_y)
    turtle.left(90)
    turtle.forward(pice * 3)
    turtle.right(90)
    draw_star(turtle.xcor(), turtle.ycor(), pice * 3)
    x_poses, y_poses = [10, 12, 12, 10], [2, 4, 7, 9]
    # 画小星星
    for x_pos, y_pos in zip(x_poses, y_poses):
        turtle.goto(x + x_pos * pice, y + height - y_pos * pice)
        turtle.left(turtle.towards(center_x, center_y) - turtle.heading())
        turtle.forward(pice)
        turtle.right(90)
        draw_star(turtle.xcor(), turtle.ycor(), pice)
    # 隐藏海龟
    turtle.ht()
    # 显示绘图窗口
    turtle.mainloop()


if __name__ == '__main__':
    main()

九、Python语法
计算机的组成：运算器、控制器、存储器、输入设备、输出设备。
冯诺依曼体系：一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。
二进制：在物理器件上面来说是很容器实现的（高压电表示1，低压电表示0.）
进制转换：二进制、十进制、八进制、十六进制
变量：在程序设计中，变量是一种存储数据的载体
数据：数值、文本、图形、音频、视频等各种各样的数据
常用的几种数据类型：整形、浮点型、字符串类型、布尔型、复数型
变量：计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。
对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。
在python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则
硬性规则：
变量名由字母、数字、下划线构成，数字不能开头
大小写敏感
不要跟关键词和系统保留字冲突。
PEP 8 要求：
用小写字母拼写，多个单词用下划线连接。
受保护的实例属性用单个下划线开头
私有的实例属性用两个下划线开头

变量的练习：
"""
使用变量保存数据并进行加减乘除运算

Version: 0.1
Author: 季延升
"""
a = 321
b = 12
print(a + b)    # 333
print(a - b)    # 309
print(a * b)    # 3852
print(a / b)    # 26.75

检查变量类型
"""
使用type()检查变量的类型

Version: 0.1
Author: 季延升
"""
a = 100
b = 12.345
c = 1 + 5j
d = 'hello, world'
e = True
print(type(a))    # <class 'int'>
print(type(b))    # <class 'float'>
print(type(c))    # <class 'complex'>
print(type(d))    # <class 'str'>
print(type(e))    # <class 'bool'>

变量类型转换
int(): 将一个数值或字符串转换成整数，可以指定进制。
float()：将一个字符串转换成浮点数。
str()：将指定的对象转换成字符串形式，可以指定编码。
chr()：将整数转换成该编码对应的字符串（一个字符）。
ord()：将字符串（一个字符）转换成对应的编码（整数）。


第二模块：模块和函数

Python的程序由包、模块和函数组成。
函数是一段可重用的有名称的代码。通过输入的参数值，返回需要的结果，并可存储在文件中供以后使用。几乎任何Python代码都可放在函数中。Python为函数提供了强大支持。
模块是处理某一类问题的集合，模块由函数和类组成。模块和常规Python程序之间的唯一区别是用途不同：模块用于编写其他程序。因此，模块通常没有main函数。
包是一个完成特定任务的工具箱，Python提供了许多有用的工具包，如字符串处理、图形用户接口、Web应用、图像处理等。使用自带的工具包，可以提高程序开发效率、减少编程复杂度，达到代码重用的效果。

自定以send_email函数
def send_email():
    pass
    
加入功能代码块
定义一个goods列表,里面标明name和price对应的数据。
goods = [
    {"name": "电脑", "price": 1999},
    {"name": "鼠标", "price": 10},
    {"name": "游艇", "price": 20},
    {"name": "美女", "price": 998}
]

循环获取列表里面的数据，提取索引，提取字典里面的键 ，提取字典里面的值。
for index in range(len(goods)):
    item = goods[index]
    print(index + 1, item['name'], item['price'])

调用函数send_email()
send_email()

循环获取输入值
while True:
    num = input("请输入要选择的商品序号(Q/q)：")
    if num.upper() == "Q":
        break
    if not num.isdecimal():
        print("用输入的格式错误")
        break
    num = int(num)
    send_email()
    if num > 4 or num < 0:
        print("范围选择错误")
        break
    target_index = num - 1
    choice_item = goods[target_index]
    print(choice_item["name"],choice_item['price'])
    send_email()

内置函数：len、bin、oct、hex
name = "你好呀"

data = len(name)
print(data)

内置模块：random
import random

num = random.randint(1, 10)
print(num)

data_list = [11, 22, 33, 44, 55]
data = random.choice(data_list)
print(data)

第三方模块：处理Excel

文件操作（字符串文本可读，字节类型可存储。）
name = "小白"

字符串转换字节
data = name.encode('utf-8')
print(data)

字节转换字符串
data = data.decode('utf-8')
print(data)

读字节类型文件操作步骤（图片、视频）
1.打开文件（以字节的方式）
file_object = open("info.txt", mode='rb')
2.读取文件内容，并赋值给data。
data = file_object.read()
3.关闭文件
file_object.close()
4.打印内容
print(data)
5.扩展可转回字符串
text = data.decode('utf-8')
6.打印字符串
print(text)

读字符串文件操作步骤
1.打开文件（以字符串的方式）
file_object = open("info.txt", mode='rt', encoding='utf-8')
2.读取文件内容，并赋值给data。
data = file_object.read()
3.关闭文件
file_object.close()
4.打印内容
print(data)

注意事项：文件打开操作需要注意当前读取的是'相对路径'，还是'绝对路径'。
绝对路径：绝对路径是指文件在硬盘上真正存在的路径。
相对路径：相对于自己的目标文件位置。
两者区别：
1.绝对路径是一个文件实际存在于硬盘中的路径。
2.相对路径，指的是与自身的目标档案相关的位置。
3.绝对路径是指可以从这个路径上查找文件夹，不管是从外部或内部存取。而相对路径则是与它本身相关的，其它地方的档案和路径，则只能在内部存取。

读取全路径(转义)：
file_object = open(r"C:\new\info.txt", mode='rt', encoding='utf-8')
data = file_object.read()
file_object.close()

读不到文件的时候会报错，可以添加判断判断路径是否存在。
import os

file_path = ""C:\new\info.txt"
exists = os.path.exists(file_path)
if exists:
    file_object = open(r"C:\new\info.txt", mode='rt', encoding='utf-8')
    data = file_object.read()
    file_object.close()
    print(data)
else:
    print("不存在")

写文件
##### 写二进制文件

`file_object = open('t1.txt', mode='wb')
file_object.write("你好".encode("utf-8"))
file_object.close()`



##### 写文本文件

`file_object = open('t1.txt', mode='wt', encoding='utf-8')
file_object.wirte('你好')
file_object.close()`



##### 复制文件

`f1 = open('a1.png', mode='wb')
content = f1.read()
f1.close()`

`f2 = open('a2.png', mode='wb')
f2.write(content)
f2.close()`



##### 用户注册

`user = input("请输入用户名：")
pwd = input("请输入密码：")
data = "{}-{}".format(user, pwd)
file_object = open("files/info.txt", mode='wt', encoding='utf-8')
file_object.write(data)
file_object.close()`



##### 多用户注册

`file_object = open("files/info.txt", mode='wb', encoding='utf-8')
while True:
    user = input("请输入用户名：")
    if user.upper() == Q:
        break
    pwd = input("请输入密码：")
    data = "{}-{}\n".format(user, pwd)
    file_object.write(data)
file_object.close()`



##### 去网上下载一点文本，文本信息写入文件

`import requests
res = requests.get(url="请求网址", header={"User-Agent": "模拟浏览器信息"})
file_object = open('file/log1.txt', mode='wb')
file_object.write(res.content)
file_object.close()`



##### 去网上下载一张图片，图片写入本地文件

`import requests
res = requests.get(url="请求网址", headers={"User-Agent": "模拟浏览器信息"})
file_object = open("files/美女.png", mode="wb")
file_object.write(res.content)
file_object.close()`



##### 文件打开模式


| 模式 | 代码         | 规则                                     |
| ---- | ------------ | ---------------------------------------- |
| 只读 | r、rt、rb    | 存在，读<br>不存在，创建再写             |
| 只写 | w、wt、wb    | 存在，清空在写<br />不存在，创建再写     |
| 只写 | x、xt、xb    | 存在，报错<br />不存在，创建再写         |
| 只写 | a、at、ab    | 存在，尾部追加。<br />不存在，创建再写。 |
| 读写 | r+、rb+      | 默认光标位置：起始位置                   |
| 读写 | w+、wb+      | 默认光标位置：起始位置（清空文件）       |
| 读写 | x+、xb+      | 默认光标位置：起始位置（新文件）         |
| 读写 | a+、at+、ab+ | 默认光标位置：末尾                       |

```
# r+、rt+、rb+，默认光标位置：起始位置
# roote-123
file_object = open('info.txt', mode='rt+')
data = file_object.read() # roote-123
print(data)
file_object.write('你好') # roote-123你好
file_object.close()

# roote-123
file_object = open('info.txt', mode='rt+')
file_object.write("hello") # hello-123
data = file_object.read()  # -123
print(data)
file_object.close()

# w+、wt+、wb+（清空文件）
file_object = open('info.txt', mode='wt+')

# 读取内容
data = file_object.read()
print(data)

# 写入内容
file_object.write('你好')

# 将光标位置重置起始
file_object.seek(0)

# 读取内容
data = file_object.read()
print(data)

file_object.close()

# x+、xt+、xb+，默认光标位置：起始位置（新文件）
# a+、at+、ab+，默认光标位置：末尾
file_object = open('info.txt', mode='at+')

# 写入内容 hello你好
file_object.write('你好')

# 将光标位置重置起始
file_object.seek(0)

# 读取内容 hello你好
data = file_object.read()
print(data)

file_object.close()

# 多用户注册
file_object = open('file/account.txt', mode='a')
while True:
    user = input("用户：")
    if user.upper() == "Q":
        break
    pwd = input("密码：")
    data = "{}-{}\n".format(user, pwd)
    file_object.write(data)
file_object.close()
```

# 常见功能：读
# read, 读所有
f = open('info.txt', mode='r')
data = f.read()
f.close()

f = open('info.txt', mode='rb')
data = f.read()
f.close()

f = open('info.txt', mode='r')
# 读一个字节
data = f.read(1)
f.close()

f = open('info.txt', mode='rb')
#读1个字节
data = f.read(1)
f.close()

# readline, 读一行
f = open('info.txt', mode='rb')
# 读第1行
first_line = f.readline()
print(first_line)

# 读第2行
second_line = f.readline()
print(second_line)

f.close()

# readlines, 读所有行，每行作为列表的一个元素
f = open('info.txt', mode='rb')
data_list = f.readlines()
f.close()
print(data_list)

# 循环，读大文件（readline加强版）
f = open('info.txt', mode='rb')
for line in f:
    print(line)
f.close()

# 常见功能：写
# write, 写
# 写入字符
f = open('info.txt', mode='a', encoding='utf-8')
f.write("你好")
f.close()

# 写入字节
f = open('info.txt', mode='ab')
f.write("你好".encode("utf-8"))
f.close()

# flush, 刷到硬盘
f = open('info.txt', mode='a', encoding='utf-8')
while True:
    # 不是写到了硬盘，而是写在缓冲区，系统会将缓冲区的内容刷到硬盘。
    f.write("你好")
    # 刷到硬盘
    f.flush()
f.close()

# 多用户注册案例
file_object = open('file/account.txt', mode='a')

while True:
    user = input("用户名：")
    if user.upper() == "Q":
        break
    pwd = input("密码：")
    data = "{}-{}\n".format(user,pwd)
    file_object.write(data)
    file_object.flush()

file_object.close()

# 移动光标位置（字节）
f = open('info.txt', mode='r+',encoding='utf-8')
# 移动光标位置，在次光标之后开始写内容（如有原内容，则会覆盖）
f.seek(3) # 2 会出现问题，可以通过f.tell()获取光标来避免。
f.write("你好呀")
f.close()

# 注意：在a模式下，调用write在文件内写入内容时，永远只能将内容写入到尾部，不会写到光标的位置。
f = open('info.txt', mode='a+',encoding='utf-8')
# 移动光标位置，在次光标之后开始写内容（如有原内容，则会覆盖）
f.seek(3)
f.write("你好呀")
f.close()

# 获取当前光标位置（ f.tell()永远获取的是字节 ）
# 读取方式为字符，获取方式为字节。
f = open('info.txt', mode='r', encoding='utf-8')
f.read(3)
f.read(1)
position = f.tell()
f.close()
print(position) # 12

# 读取方式为字节，获取方式为字节。
f = open('info.txt', mode='rb')
f.read(3)
f.read(1)
position = f.tell()
f.close()
print(position) # 4

# 上下文管理
# 之前对文件进行操作时，每次都要打开和关闭文件，比较繁琐且容易忘记关闭文件。
# 以后再进行文件操作时，推荐大家使用with上下文管理，它可以自动实现关闭文件。
with open("xxxx.txt", mode='rb') as file_object:
    data = file_object.read()
    print(data)
# 在python2.7后，with又支持同时对多个文件的上下文进行管理，即：
with open("xxxx.txt", mode='rb') as f1, open("xxxx.txt", mode='rb') as f2:
    pass

# 文件操作例题
1. 补充代码：实现下载视频并保存到本地
import requests

res = requests.get(
    url="https://f.video.weibocdn.com/000pTZJLgx07IQgaH7HW010412066BJV0E030.mp4?label=mp4_720p&template=1280x720.25.0&trans_finger=1f0da16358befad33323e3a1b7f95fc9&media_id=4583105541898354&tp=8x8A3El:YTkl0eM8&us=0&ori=1&bf=2&ot=h&ps=3lckmu&uid=3ZoTIp&ab=3915-g1,966-g1,3370-g1,3601-g0,3601-g0,3601-g0,1493-g0,1192-g0,1191-g0,1258-g0&Expires=1608204895&ssig=NdYpDIEXSS&KID=unistore,video",
    headers={
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"
       }
   )
   
# 视频的文件内容
res.content

with open('nba.mp4', mode='wb') as file_object:
    file_object.write(res.content) 

2. 日志分析，计算某用户`223.73.89.192`访问次数。日志文件如下：`access.log`
49.89.167.91 - - [17/Dec/2020:03:43:50 +0800] "GET /wiki/detail/3/40 HTTP/1.1" 301 0 "-" "Mozilla/5.0(Linux;Android 5.1.1;OPPO A33 Build/LMY47V;wv) AppleWebKit/537.36(KHTML,link Gecko) Version/4.0 Chrome/43.0.2357.121 Mobile Safari/537.36 LieBaoFast/4.51.3" "-"
49.89.167.91 - - [17/Dec/2020:03:44:11 +0800] "GET /wiki/detail/3/40/ HTTP/1.1" 200 8033 "-" "Mozilla/5.0(Linux;Android 5.1.1;OPPO A33 Build/LMY47V;wv) AppleWebKit/537.36(KHTML,link Gecko) Version/4.0 Chrome/43.0.2357.121 Mobile Safari/537.36 LieBaoFast/4.51.3" "-"
203.208.60.66 - - [17/Dec/2020:03:47:58 +0800] "GET /media/uploads/2019/11/17/pic/s1.png HTTP/1.1" 200 710728 "-" "Googlebot-Image/1.0" "-"
223.73.89.192 - - [17/Dec/2020:03:48:26 +0800] "GET /wiki/detail/3/40/ HTTP/1.1" 200 8033 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:26 +0800] "GET /static/stark/plugins/font-awesome/css/font-awesome.css HTTP/1.1" 200 37414 "https://pythonav.com/wiki/detail/3/40/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:26 +0800] "GET /static/stark/plugins/bootstrap/css/bootstrap.css HTTP/1.1" 200 146010 "https://pythonav.com/wiki/detail/3/40/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:26 +0800] "GET /static/web/css/commons.css HTTP/1.1" 200 3674 "https://pythonav.com/wiki/detail/3/40/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:26 +0800] "GET /static/mdeditor/editormd/css/editormd.preview.css HTTP/1.1" 200 60230 "https://pythonav.com/wiki/detail/3/40/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:26 +0800] "GET /static/stark/js/jquery-3.3.1.min.js HTTP/1.1" 200 86927 "https://pythonav.com/wiki/detail/3/40/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:26 +0800] "GET /static/stark/plugins/bootstrap/js/bootstrap.min.js HTTP/1.1" 200 37045 "https://pythonav.com/wiki/detail/3/40/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:26 +0800] "GET /static/mdeditor/editormd/lib/marked.min.js HTTP/1.1" 200 19608 "https://pythonav.com/wiki/detail/3/40/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:27 +0800] "GET /static/mdeditor/editormd/lib/prettify.min.js HTTP/1.1" 200 17973 "https://pythonav.com/wiki/detail/3/40/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:27 +0800] "GET /static/mdeditor/editormd/fonts/fontawesome-webfont.woff2?v=4.3.0 HTTP/1.1" 200 56780 "https://pythonav.com/static/mdeditor/editormd/css/editormd.preview.css" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:27 +0800] "GET /static/mdeditor/editormd/editormd.js HTTP/1.1" 200 163262 "https://pythonav.com/wiki/detail/3/40/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:28 +0800] "GET /static/mdeditor/mdeditor-preview-init.js HTTP/1.1" 200 261 "https://pythonav.com/wiki/detail/3/40/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:29 +0800] "GET /static/stark/plugins/font-awesome/fonts/fontawesome-webfont.woff2?v=4.7.0 HTTP/1.1" 200 77160 "https://pythonav.com/static/stark/plugins/font-awesome/css/font-awesome.css" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"
223.73.89.192 - - [17/Dec/2020:03:48:29 +0800] "GET /media/uploads/2019/02/22/Gobook/_book/ssl2.png HTTP/1.1" 200 203535 "https://pythonav.com/wiki/detail/3/40/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Edg/87.0.664.60" "-"

total_count = 0
ip = "223.73.89.192"
with open('account.log', mode='r', encoding='utf-8') as file_object:
    for line in file_object:
        print(line)
        if not line.startswith(ip):
            continue
        total_count += 1
print(total_count)

3. 日志分析升级，计算所有用户的访问次数。
user_dict = {}
with open('account.log', mode='r',encoding='utf-8') as file_object:
    for line in file_object:
        user_ip = line.split(" ")[0]
        if user_ip in user_dict:
            user_dict[user_ip] += 1
        else:
            user_dict[user_ip] = 1
print(user_dict)

4. 筛选出股票 当前价大于 20 的所有股票数据。
股票代码,股票名称,当前价,涨跌额,涨跌幅,年初至今,成交量,成交额,换手率,市盈率(TTM),股息率,市值
SH601778,N晶科,6.29,+1.92,+43.94%,+43.94%,259.66万,1625.52万,0.44%,22.32,-,173.95亿
SH688566,吉贝尔,52.66,+6.96,+15.23%,+122.29%,1626.58万,8.09亿,42.29%,89.34,-,98.44亿
SH688268,华特气体,88.80,+11.72,+15.20%,+102.51%,622.60万,5.13亿,22.87%,150.47,-,106.56亿
SH600734,实达集团,2.60,+0.24,+10.17%,-61.71%,1340.27万,3391.14万,2.58%,亏损,0.00%,16.18亿
SH900957,凌云B股,0.36,+0.033,+10.09%,-35.25%,119.15万,42.10万,0.65%,44.65,0.00%,1.26亿
SZ000584,哈工智能,6.01,+0.55,+10.07%,-4.15%,2610.86万,1.53亿,4.36%,199.33,0.26%,36.86亿
SH600599,熊猫金控,6.78,+0.62,+10.06%,-35.55%,599.64万,3900.23万,3.61%,亏损,0.00%,11.25亿
SH600520,文一科技,8.21,+0.75,+10.05%,-24.05%,552.34万,4464.69万,3.49%,亏损,0.00%,13.01亿
SH603682,锦和商业,11.73,+1.07,+10.04%,+48.29%,2746.63万,3.15亿,29.06%,29.62,-,55.42亿
SZ300831,派瑞股份,12.27,+1.12,+10.04%,+208.29%,25.38万,311.41万,0.32%,60.59,-,39.26亿

with open('stock.txt', mode='r',encoding='utf-8') as file_object:
    # 1.跳过第一行
    file_object.readline()
    # 2.接着往下读
    for line in file_object:
        text = line.split(',')[2]
        price = float(text)
        if price > 20:
            print(line.strip())

5. 根据要求修改文件的内容，原文件内容如下：`ha.conf`
请将文件中的 `luffycity`修改为 `pythonav` 。
global       
        log 127.0.0.1 local2
        daemon
        maxconn 256
        log 127.0.0.1 local2 info
defaults
        log global
        mode http
        timeout connect 5000ms
        timeout client 50000ms
        timeout server 50000ms
        option  dontlognull
   
listen stats :8888
        stats enable
        stats uri       /admin
        stats auth      admin:1234
   
frontend oldboy.org
        bind 0.0.0.0:80
        option httplog
        option httpclose
        option  forwardfor
        log global
        acl www hdr_reg(host) -i www.luffycity.org
        use_backend www.luffycity.com if www
   
backend www.luffycity.com
        server 100.1.7.9 100.1.7.9 weight 20 maxconn 3000

# 1. 文件督导内存，再通过replace（适用小文件，不适合大文件）
# 2. 挨个位置读文件的内容，遇到luffycity将其替换成pythonav。（不可取)
# 3. 同时打开两个文件，读 + 写。（适用于小文件，适用大文件）
with open('ha.conf', mode='r',encoding='utf-8') as read_file_object,open('new.conf', mode='w',encoding='utf-8') as write_file_object:
    for line in read_file_object:
        new_line = line.replace("luffycity", 'pythonav')
        write_file_object.write(new_line)

import shutil
shutil.move('new.conf', 'ha.conf')


6. 下载文档中的所有图片且以用户名为图片名称存储。
import requests
import os
with open('files/mv.csv', mode='r',encoding='utf-8') as file_object:
    file_object.readline()
    for line in file_object:
        user_id, username, url = line.strip().split(',')
        print(username, url)
        # 1. 根据URL下载图片
        res = requests.get(
            url=url,
            headers={
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36"
            }
        )
        # 检查images目录是否存在？ 不存在，则创建images目录
        if not os.path.exists("images"):
            # 创建images目录
            os.makedirs("images")
        # 2. 将图片的内容写入到文件
        with open("images/{}.png".format(username), mode='wb') as img_object:
            img_object.write(res.content)

# ini格式
ini文件是initialization file的缩写，平时用于存储软件的配置文件。例如：mysql数据库的配置文件。
[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
log-bin=py-mysql-bin
character-set-server=utf8
collation-server=utf8_general_ci
log-error=/var/log/mysqld.log
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

[mysqld_safe]
log-error=/var/log/mariadb/mariadb.log
pid-file=/var/run/mariadb/mariadb.pid

[client]
default-character-set=utf8

import configparser

config = configparser.ConfigParser()
config.read('files/my.ini', encoding='utf-8')

# 1.获取所有的节点
result = config.sections()
print(result)

# 2.索取节点下的键值
result = config.items("mysqld_safe")
print(result)

for key,value in config.items("mysqld_safe"):
    print(key, value)

# 3.获取某个节点下的键的对应的值
result = config.get("mysqld","collation-server")
result(result)

# 4.是否存在节点
v1 = config.has_section("client")
print(v1)

# 5.添加一个节点
config.add_section("group")
# 添加节点和键值
config.set('group', 'name', 'woai')
config.set('client','name', 'woai')
config.write(open('files/new.ini', mode='w', encoding='utf-8'))

# 删除
# 删除节点
config.remove_section('clinet')
# 删除节点下的键值
config.remove_option("mysqld", "datadir")
config.write(open("file/new.ini", mode='w', encoding='utf-8'))

# xml格式文件
# 可扩展标记语言，是一种简单的数据存储语言，xml被设计用来传输和存储数据。
# 存储，可用来存放配置文件，例如：java的配置文件
# 传输，网络传输时以这种格式存在，例如,早期ajax传输的数据、soap协议等。
# 在python开发中：微信支付、微信公众号消息处理 时会用到基于XML传输数据。
# 例如：https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Receiving_standard_messages.html
<data>
    <country name="Liechtenstein">
        <rank updated="yes">2</rank>
        <year>2023</year>
        <gdppc>141100</gdppc>
        <neighbor direction="E" name="Austria" />
        <neighbor direction="W" name="Switzerland" />
    </country>
    <country name="Singapore">
        <rank updated="yes">5</rank>
        <year>2026</year>
        <gdppc>59900</gdppc>
        <neighbor direction="N" name="Malaysia" />
    </country>
    <country name="Panama">
        <rank updated="yes">69</rank>
        <year>2026</year>
        <gdppc>13600</gdppc>
        <neighbor direction="W" name="Costa Rica" />
        <neighbor direction="E" name="Colombia" />
    </country>
</data>

# 读取文件和内容
from xml.etree import ElementTree as ET

# ET去打开xml文件
tree = ET.parse("files/xo.xml")

# 获取根标签
root = tree.getroot()

print(root)

from xml.etree import ElementTree as ET
content = """
<data>
    <country name="Liechtenstein">
        <rank updated="yes">2</rank>
        <year>2023</year>
        <gdppc>141100</gdppc>
        <neighbor direction="E" name="Austria" />
        <neighbor direction="W" name="Switzerland" />
    </country>
    <country name="Singapore">
        <rank updated="yes">5</rank>
        <year>2026</year>
        <gdppc>59900</gdppc>
        <neighbor direction="N" name="Malaysia" />
    </country>
    <country name="Panama">
        <rank updated="yes">69</rank>
        <year>2026</year>
        <gdppc>13600</gdppc>
        <neighbor direction="W" name="Costa Rica" />
        <neighbor direction="E" name="Colombia" />
    </country>
</data>
"""

root = ET.XML(content)
print(root)

# 循环获取data标签里面的子标签和属性
for child in root:
    # child.tag = conntry
    # child.attrib = {"name", "Panama"}
    print(child.tag, child.attrib)
    for node in child:
        print(node.tag, node.attrib, node.text)

# find查找一个标签
country_object = root.find("country")
print(country_object.tag, country_object.attrib)
gdppc_object = country_object.find("gdppc")
print(gdppc_object.tag, gdppc_object.attrib, gdppc_object.text)

# findall查找多个标签
root = ET.XML(content)
v1 = root.findall('country')
print(v1)

v2 = root.find('country').find('rank')
print(v2.text)

# 找所有的year标签（不分层级）
for child in root.iter('year'):
    print(child.tag, child.text)

# 修改节点内容和属性
rank = root.find('country').find('rank')
print(rank.text)
rank.text = "999"
print(rank.text)
rank.set('update', '2020-11-11')
# 保存文件
tree = ET.ElementTree(root)
tree.write("new.xml", encoding="utf-8")

# 删除节点
root.remove( root.find('country') )
# 保存文件
tree = ET.ElementTree(root)
tree.write("new.xml", encoding="utf-8")

# 构建一个XML文档
from xml.etree import ElementTree as ET

# 创建根标签
root = ET.Element("home")

# 创建节点大儿子
son1 = ET.Element('son', {'name': '儿1'})
# 创建小儿子
son2 = ET.Element('son', {"name": '儿2'})

# 在大儿子中创建两个孙子
grandson1 = ET.Element('grandson', {'name': '儿11'})
grandson2 = ET.Element('grandson', {'name': '儿12'})
son1.append(grandson1)
son1.append(grandson2)

# 把儿子添加到根节点中
root.append(son1)
root.append(son2)

tree = ET.ElementTree(root)
tree.write('oooo.xml', encoding='utf-8', short_empty_elements=False)
<home>
    <son name="儿1">
        <grandson name="儿11"></grandson>
        <grandson name="儿12"></grandson>
    </son>
    <son name="儿2"></son>
</home>

# 第二种方式构建XML
from xml.etree import ElementTree as ET
root = ET.Element("famliy")
# 创建大儿子
son1 = root.makeelement('son', {'name': '儿1'})
# 创建小儿子
son2 = root.makeelement('son', {"name": '儿2'})

# 在大儿子中创建两个孙子
grandson1 = son1.makeelement('grandson', {'name': '儿11'})
grandson2 = son1.makeelement('grandson', {'name': '儿12'})

son1.append(grandson1)
son1.append(grandson2)


# 把儿子添加到根节点中
root.append(son1)
root.append(son2)

tree = ET.ElementTree(root)
tree.write('oooo.xml',encoding='utf-8')

<famliy>
    <son name="儿1">
        <grandson name="儿11"></grandson>
        <grandson name="儿12"></grandson>
    </son>
    <son name="儿2"></son>
</famliy>

# 第三种构建方法
from xml.etree import ElementTree as ET


# 创建根节点
root = ET.Element("famliy")


# 创建节点大儿子
son1 = ET.SubElement(root, "son", attrib={'name': '儿1'})
# 创建小儿子
son2 = ET.SubElement(root, "son", attrib={"name": "儿2"})

# 在大儿子中创建一个孙子
grandson1 = ET.SubElement(son1, "age", attrib={'name': '儿11'})
grandson1.text = '孙子'


et = ET.ElementTree(root)  #生成文档对象
et.write("test.xml", encoding="utf-8")

<famliy>
	<son name="儿1">
    	<age name="儿11">孙子</age>
    </son>
	<son name="儿2"></son>
</famliy>

# XML小视频信息格式
<user>&lt;![CDATA[你好呀]]</user>

from xml.etree import ElementTree as ET

# 创建根节点
root = ET.Element("user")
root.text = "<![CDATA[你好呀]]"

et = ET.ElementTree(root)  # 生成文档对象
et.write("test.xml", encoding="utf-8")

# 微信小程序数据处理
content = """<xml>
    <ToUserName><![CDATA[gh_7f083739789a]]></ToUserName>
    <FromUserName><![CDATA[oia2TjuEGTNoeX76QEjQNrcURxG8]]></FromUserName>
    <CreateTime>1395658920</CreateTime>
    <MsgType><![CDATA[event]]></MsgType>
    <Event><![CDATA[TEMPLATESENDJOBFINISH]]></Event>
    <MsgID>200163836</MsgID>
    <Status><![CDATA[success]]></Status>
</xml>"""

from xml.etree import ElementTree as ET

info = {}
root = ET.XML(content)
for node in root:
    print(node.tag, node.text)
    info[node.tag] = node.text
print(info)

{'ToUserName': 'gh_7f083739789a', 
'FromUserName': 'oia2TjuEGTNoeX76QEjQNrcURxG8', 
'CreateTime': '1395658920', 
'MsgType': 'event', 
'Event': 'TEMPLATESENDJOBFINISH', 
'MsgID': '200163836', 
'Status': 'success'}

# Excel格式文件
Python内部未提供处理Excel文件的功能，想要在Python中操作Excel需要按照第三方的模块。
此模块中集成了Python操作Excel的相关功能，接下来我们就需要去学习该模块提供的相关功能即可。
pip3 install openpyxl

from xml.dom.domreg import well_known_implementations
from openpyxl import load_workbook

wb = load_workbook("files/p1.xlsx")

# sheet相关操作
# sheet的读取
# 1.获取excel文件中的所有sheet名称
print(wb.sheetnames)

# 2.选择sheet，基于sheet名称
sheet = wb["数据导出"]

cell = sheet.cell(1,1)
print(cell.value)

# 3.选择sheet,基于索引位置
sheet = wb.worksheets[0]
cell = sheet.cell(1,2)
print(cell.value)

# 4.循环所有sheet
for name in wb.sheetnames:
    sheet = wb[name]
    cell = sheet.cell(1, 1)
    print(cell.value)

for sheet in wb.worksheets:
    cell = sheet.cell(1, 1)
    print(cell.value)
for sheet in wb:
    cell = sheet.cell(1, 1)
    print(cell.value)

# 读取sheet中的某个单元格信息
from openpyxl import load_workbook
  
wb = load_workbook("files/p1.xlsx")
sheet = wb.worksheets[0]
  
# 1.获取第N行第N列的单元格(位置是从1开始）

cell = sheet.cell(1, 1)
  
print(cell.value)
print(cell.style)
print(cell.font)
print(cell.alignment)

# 2.获取某个单元格

c1 = sheet["A2"]
print(c1.value)
  
c2 = sheet['D4']
print(c2.value)

# 3.第N行所有的单元格
for cell in sheet[1]:
    print(cell.value)

# 4.所有行的数据(获取某一列数据)
for row in sheet.rows:
    print(row[0].value, row[1].value)

# 5.获取所有列的数据
for col in sheet.columns:
    print(col[1].value)

# 读合并的单元格
from openpyxl import load_workbook
  
wb = load_workbook("files/p1.xlsx")
sheet = wb.worksheets[2]
  
# 获取第N行第N列的单元格(位置是从1开始）
c1 = sheet.cell(1, 1)
print(c1)  # <Cell 'Sheet1'.A1>
print(c1.value) # 用户信息
  
c2 = sheet.cell(1, 2)
print(c2)  # <MergedCell 'Sheet1'.B1>
print(c2.value) # None






