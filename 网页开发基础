# <元素> 内容 <元素/>
# 为元素添加内容时，若出现换行或多个空格，浏览器会将其转换为一个空格。
# 浏览器会忽略元素内容前后的空格与换行。
# 若想要强制在某个位置换行，可以使用<br>标签。（br = break = 打断）
# <p>Sun moon and you.<br>Sun for morning,<br>moon for night,<br>and you forever.</p>

# 有时我们希望为网页中的文本设置一些简单的样式，比如加粗、斜体或者下划线等。这时可以使用HTML中的文本格式化标签。
# 文本内容中常用的几个格式化标签：在p元素中使用：<b> 加粗、独立使用：<i> 倾斜、<s> 删除线、<u> 下划线
# <i>斜体</i>、<s>删除线</s>、<u>下划线</u>、<p>把段落中的文本<b>加粗</b></p>
# p 元素标记的a、b 分为两行显示在网页中；
# 而b元素标记的c、d 则作为同一行显示在网页中。
# <p> a </p>、<p> b </p>
# <b> c </b>、<b> d </b>

# HTML中的元素在显示结构上又被分为两类：

# 第一类是类似于p元素的块级元素；(h1~h6 p 块级元素在浏览器显示时，通常会以新的一行开始。块级元素中可以包含其他的行内或块级元素。)
# <!--在块级元素独占一行显示-->
# <h1>我是标题</h1><p>我是正文</p>
# <!--在块级元素中加入行内元素b-->
# <p>在块级元素中加入<b>行内元素</b></p>

# 第二类是类似于b元素的行内元素。(b i img a 行内元素在浏览器显示时，通常不会以新的一行开始，而是与其他元素在同一行显示。)
# 行内元素中可以包含其他行内元素，但不能包含块级元素。

# 属性通常由属性名/值对组成
# 属性可以分为通用属性和专用属性

# html 元素用来标记一个完整网页
# head 元素用来标记网页的头部
# title 网页的标题（1个html文档只能有一个title标签）
# body 元素用来标记网页的主体(浏览器展示给用户的内容均要放在body元素中)
# h1 1级标题(1个网页可以含有多个h（n）标题)
# h2 2级标题
# h3 3级标题
# h4 4级标题
# h5 5级标题
# h6 6级标题
# p 标记段落

# class 属性用来对相同的元素进行分类。
# 它的属性值就是每个分类的名称（类名）。名称可以设定为任意内容且该名称可以重复使用。
# ﻿class 可以设置在任何元素中，是一个通用属性。
<p class="a">A: 宫廷玉液酒</p>
<p class="b">B: 一百八一杯~</p>

# id 属性为某个元素分配一个唯一的标识符。
# id也是一个通用属性，它的使用方法和class类似。

# 但与class的区别在于，id属性的值是唯一、不可重复的，类似于我们的身份证号码。
# 右边的代码为"id=unlock"的p元素设定颜色。

1、网页中常见的文本元素，如标题元素与段落元素；
2、两个通用属性id与class；
3、元素的两种类型 —— 块级元素与行内元素。

网页加载图片的过程可以分为三个部分：
第一步，浏览器从html中获取图片的地址，即知道图片在哪台电脑（服务器）、哪个文件夹中；
第二步，浏览器根据地址查找图片文件；
第三步，根据查找结果，决定图片加载成功或失败。

那么浏览器是如何从HTML中获取图片地址的呢？
它主要是依靠一个名为img的标签。

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>图片结构</title>
</head>
<body>
    <p>您上传的头像：</p>
    <img src="image/head.png" alt="头像">
</body>
</html>
这段代码实现了一个包含图片的网页。
其中第9行，使用了img元素为网页添加图片。

img 元素可以为网页插入一张图片，它是一个由单标签组成的行内元素。
也就是说，它只包含开始标签，且多个元素可以在同一行显示。
img全称：image - 图像

src 属性用于记录图片所在的文件位置，浏览器可以通过该地址找到要使用的图片。
例如，我们要显示images文件夹中名为head.png的图片。
稍后我们会详细学习获取图片地址的方法。
src全称：source - 来源
<img src="images/head.png" alt="头像">

alt 属性用来记录一段文字。
当浏览器未能找到图片时，alt中的内容会代替图片显示在网页中。
alt全称：alternate - 代替的

网页中的图片默认以原始大小显示。当图片过大时，屏幕无法完整显示图片内容。
此时，你可以通过width属性和height属性，设置图片的宽度和高度。
属性的值为数字+像素单位(px)，如100px。

你也可以只设置图片的宽度（或高度），浏览器会按照比例自动调整图片的高度（或宽度）。
比如，右边的代码仅设置了宽度，浏览器会按照比例自动调整图片的高度。
<img src="images/head.png" width="100px">
<img src="images/head.png" width="50px">
<img src="images/head.png" width="10px">

当图片与HTML文档在同一个文件夹时，图片地址的格式如下：
./文件名称.文件类型
可简写为文件名称.文件类型
其中.代表文档所在的文件夹，/用来分割文件夹与文件的名称。

图片数量较多时，我们可以将所有图片放在同一个文件夹中（如右图images），并将该文件夹与html文档放在一起。
此时，文件夹中的图片地址格式如下：
文件夹名称/文件名称.文件类型

其实在HTML中，除了图片以外，我们还可以利用地址找到另一个网页。
如右图所示，将两个html文档用地址链接起来。
为了实现这一功能，我们需要一个新的元素——超链接。

超链接（或简称链接），是指从一个网页指向另一个目标的连接关系。
超链接就像网页中的传送门，只需轻轻一点，就能带你进入另一个网站。
比如右边的网页就是利用超链接制作的导航栏。

通常情况下，网页不会独立存在。
一个完整的网站应该由多个不同的html文档相互链接而成。
比如【夜曲编程】这个网站，它由官网首页、我的课程、购买课程、学习社区等多个HTML文档相互链接组成。

右边代码展示了一个简单的个人网站。
其中第9行，创建了一个超链接元素，链接了另一个html文档。
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>超链接</title>
</head>
<body>
    <img src="images/head.png" alt="头像">
    <a href="./aboutme.html">点击此处了解我</a>
</body>
</html><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>超链接</title>
</head>
<body>
    <img src="images/head.png" alt="头像">
    <a href="./aboutme.html">点击此处了解我</a>
</body>
</html>

<a>标签表示一个超链接，它是一个双标签，内容以</a>结束。
与<img>相同，它是一个行内元素。
全称：anchor - 锚

href属性用来设定链接的目标地址。
与src属性不同的是，src 只可以设置图片文件的地址；
而href属性中的地址可以包含：
1、另一个网页；
2、网页中的某个元素；
3、一张图片；
4、一个JS程序；
...
例如右边的代码，将href设置为“aboutme.html”的地址。
全称：Hypertext Reference - 引用超文本

<body>
    <img src="images/head.png" alt="头像">
    <a href="./aboutme.html">点击此处了解我</a>
</body>

当 href属性中的地址无效时，浏览器通常会显示404页面，表示文件不存在。
<a href="无效的地址">点击此处了解我</a>

一段被超链接标记的文字。
用户通过点击这段文字进入超链接。
该文字在不同的状态下有不同的表现方式：
1、未点击链接时，使用带有下划线的蓝色字体。
2、点击链接后，使用带有下划线的紫色字体。
<a href="./aboutme.html">点击此处了解我</a>

当超链接被点击时，浏览器默认直接从当前页面进入目标页面。
利用target属性可以修改这项规则。
该属性常用的值有两种：
_blank，浏览器会在新的页面中打开文档；
_self，浏览器会在当前页面打开文档（默认）。
注意单词前的下划线_。
<a href="https://np.baicizhan.com/" target="_blank">新页面打开夜曲官网</a>
<a href="https://np.baicizhan.com/" target="_self">本页面打开夜曲官网</a>

页面内跳转
使用超链接不仅能够指向一个html文档，还可以链接一个含有id属性的元素。
我们只要将id值作为href的地址即可，格式为href="#元素的id"
例如右边的代码，将第24行的a元素指向第11行的h1元素。
这样，点击超链接就会自动回到“第一本书”的位置。
<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>锚点</title>
</head>

<body>
    <!-- 为h1设定一个id属性，值为top-->
    <h1 id="top">第一本书</h1>
    <p>Python</p>
    <h1>第二本书</h1>
    <p>MySQL</p>
    <h1>第三本书</h1>
    <p>JavaScript</p>
    <h1>第四本书</h1>
    <p>C语言</p>
    <h1>第五本书</h1>
    <p>CSS</p>
    <h1>第六本书</h1>
    <p>HTML</p>
    <!--设置href中的地址为#top-->
    <a href="#top">回到头部</a>
</body>

</html>

将img元素作为内容，放在a元素中。即可为图片添加一个超链接。
例如右边的代码，点击头像就会打开“aboutme.html“。
<a href="./aboutme.html">
    <img src="images/head.png" alt="头像">
</a>

<a开始标签 href="./a.html"目标地址 target="_blank"打开方式>
  点击此处了解我 -- 文字内容
</a> 结束标签

今天我们学习了两个非文本元素——图片与超链接。
从现在开始，制作网页不再只是编写一个HTML文档，而是结合了多张图片、多个html文档的开发项目

第2到4行，定义了一个CSS。
CSS包含选择器、属性、属性值三个部分。

/* css语法规则 */
h1 {
    color: red;
}

这里的选择器h1，就表示为所有h1元素定义样式。
这里的color表示设置颜色。
这里的red就是控制颜色显示出红色。
英文冒号:用于将属性与属性值分隔开。
英文分号;放到属性值后，作为结束标志，是固定格式。
一条声明的格式为属性: 属性值;
大括号 { } 为固定格式，声明需要放在大括号内。
注意：以上的空格不是固定格式，为了代码清晰，我们统一添加空格。
/* 为注释的起始 ，*/ 为注释的结束，中间放入注释内容。

CSS中，没有强制规范代码的书写风格。
为了使 CSS 更具可读性，我们可以在定义CSS时每一行代码上只放置一个声明。
比如，h1 {color: red;font-size: 20px;}
我们会写成如图的结构。
h1 {
    color: red;
    font-size: 20px;
}

CSS由两个部分构成，选择器和声明。
选择器，用于指定要为哪个HTML元素定义样式。
声明中的属性，是指我们给HTML元素设置的样式名称。
声明中的属性值，用来控制某个属性的显示效果。

CSS的出现，使得网页的样式与内容分离开来。
HTML负责网页中有哪些内容，CSS负责以哪种样式来展现这些内容。
因此，CSS必须和HTML协同工作，那么如何在 HTML 中引用CSS呢？

CSS的引用方式有三种：内部样式表、外部样式表、行内样式。
内部样式表，是指将CSS放到 <style> 标签中，而<style>标签必须放在HTML的<head>标签内。
<style> 标签类似于一个容器，里面包含着文档的样式信息，标签内部需要放入具体的CSS代码。

1.内部样式表，将CSS样式定义在HTML文档的内部。
当我们对单个页面进行设置样式时，会使得整体结构较为清晰。
这也是本课程的HTML引用CSS时，选择内部样式表的原因。

2.外部样式表
在复杂应用中，外部样式表是最常见的引用CSS的方式。
外部样式表，是指将CSS样式代码复制到一个文本文件后，另存为 .css 文件。
然后，我们通过HTML的<link>标签将这个样式文件应用到HTML中。

首先，我们需要单独定义一个.css 格式的样式文件（例如style.css）
然后，我们在HTML中使用<link>标签引入这个style.css文件。
注意，<link> 标签也是放在<head>标签中。

<link>标签的两个属性：
rel：定义当前文档与被连接文档的关系。这里的"stylesheet"，表示被连接文档是一个样式表文件。
href：定义所连接外部样式表文件的路径。
外部样式表的最方便之处，就在于一个样式可以同时应用于多个页面。
我们可以通过同一个CSS文件，来设置不同HTML文档的样式。

3.行内样式
行内样式，也叫内联样式，是在 HTML 元素标签的style属性中直接定义CSS样式。
由于行内样式定义在标签内部，所以它只对所在的标签有效。
行内样式，虽然可以很方便的为HTML元素设置CSS样式，但它的缺点也非常明显：
1. 需要在每个HTML元素的标签中定义style属性，很不方便；
2. 修改页面样式时需要对页面逐个修改；
3. 过多的行内样式会导致HTML文档的体积增大。
所以，不推荐过多使用行内样式。


前面，我们使用的CSS选择器，是通过元素的标签来指定网页的样式。
而CSS中提供了多种不同类型的选择器，我们需要根据不同的情况，选择不同的CSS选择器。
CSS中，常见的基础选择器有三种。分别为：标签选择器、类选择器、id选择器。
1. 标签选择器
顾名思义，标签选择器，是通过具体的标签名，找到页面所有同名的标签，来设置样式。
比如，这里的p就是标签选择器，页面中所有的p元素，都被设置成了blue。
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <style>
        /* 使用标签选择器，设置p元素的颜色为blue */
        p {
            color: blue;     
        }
    </style>
</head>
<body>
    <h3>夜曲编程</h3>
    <p>数据分析</p>
    <p>SQL数据处理</p>
    <p>网络爬虫</p>
</body>
</html>

无论嵌套关系有多深，标签选择器都能找到对应的标签。
比如，标签选择器a可以直接改变<p>标签中的<a>标签的颜色。
<style>
    a {
        color: red;
    }
</style>
    
<p>
    <a href="https://np.baicizhan.com/">夜曲编程</a>
</p>

2.类选择器
简单来说，标签选择器是匹配所有同名的标签。
当然，如果我们想筛选特定的几个标签，就需要用到类选择器。
类选择器，也叫class选择器。
使用类选择器的前提是：标签中需要有class属性。
第14和15行，我们给<p>标签内添加了class属性，属性值自定义为data，即class="data"。
<body>
    <h3>夜曲编程</h3>
    <p class="data">数据分析</p>
    <p class="data">SQL数据处理</p>
    <p>网络爬虫</p>
</body>

类选择器，就是根据标签的class属性，来匹配具体的HTML标签。
第7行，我们定义了一个类选择器。
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <style>
        /* 使用类选择器，将包含class="data"属性的元素颜色设置为blue */
        .data {
            color: blue;     
        }
    </style>
</head>
<body>
    <h3>夜曲编程</h3>
    <p class="data">数据分析</p>
    <p class="data">SQL数据处理</p>
    <p>网络爬虫</p>
</body>
</html>

当标签设置了class属性后，类选择器就能够匹配文档中所有具有class="data"属性的标签。
类选择器，句点. 开头，后面紧跟class的属性值。
比如，第7行的.data就是一个类选择器，它将14和15行的p元素颜色设置为了blue。
类选择器会匹配文档中所有具有class="data"属性的标签，即使它们是不同的标签。
比如第13-15行，<h3>标签和<p>标签都有class="data"属性，则它们的颜色都会变化。

由于class属性不是唯一的，可以应用于不同的标签。
因此，我们可以在定义类选择器时指定标签名。
比如，第13-15行，虽然<h3>标签和<p>标签都有class="data"属性。
但是，由于第7行使用了p.data，指定了p标签，所以，只有p元素的颜色会发生变化。
<head>
    <meta charset="UTF-8">
    <style>
        /* 使用类选择器，将包含class="data"属性的元素颜色设置为blue */
        .data {
            color: blue;     
        }
    </style>
</head>

由于class属性不是唯一的，可以应用于不同的标签。
因此，我们可以在定义类选择器时指定标签名。
比如，第13-15行，虽然<h3>标签和<p>标签都有class="data"属性。
但是，由于第7行使用了p.data，指定了p标签，所以，只有p元素的颜色会发生变化。
<head>
    <meta charset="UTF-8">
    <style>
        /* 使用类选择器，只将包含class="data"属性的p元素颜色设置为blue */
        p.data {
            color: blue;     
        }
    </style>
</head>

3. id 选择器
类选择器像身份证的姓名，因为一个姓名可以被多个人使用，所以类选择器可以选择一类标签。
而标签的id属性的值，就像身份照号码，是唯一的。
也就是说，设置这种标签的样式时，就需要用到id选择器。

id选择器和类选择器的用法几乎一致。
比如16行的标签设置了id属性，id选择器就只会匹配具有id="apply"属性的标签。
id选择器，井号# 开头，后面紧跟id属性的值。
比如，第7行的#apply就是一个id选择器，它将16行的p元素颜色设置为了blue。
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <style>
        /* 使用id选择器，将包含id="apply"属性的元素颜色设置为blue */
        #apply {
            color: blue;     
        }
    </style>
</head>
<body>
    <h3>夜曲编程</h3>
    <p class="data">数据分析</p>
    <p class="data">SQL数据处理</p>
    <p id="apply">网络爬虫</p>
</body>
</html>

类选择器以 . 开头，可以匹配多个具有class属性的标签。
id选择器以 # 开头，只能匹配一个对应的id属性的标签。

上节课，我们使用了red、blue这样的颜色名称，设置了字体的颜色。
除此之外，是否有其他设置颜色的方式呢？CSS还能设置哪些常见的样式呢？
本节课，我们将通过CSS设置颜色的方式、CSS设置字体样式、CSS设置文本样式三个方面，进行学习。

如图是CSS选择器，设置字体颜色的一段完整代码。
CSS选择器在<head>标签中的<style>标签内部，而HTML元素在<body>标签的内部。
后续讲解时，有时我们会将CSS选择器和待设置的元素剥离出来讲解。
颜色在网页中的作用非常重要，CSS中提供了多种设置颜色值的方法。
除了颜色名称外，我们今天再重点讲解另外两种颜色的表示方式。

1.颜色名称
将color的属性值，设置成颜色的英文名就能显示对应的颜色。
比如，这里的red表示红色，这种设置颜色的方式是最简单的。
但是不同的浏览器，对颜色的解析可能存在差异，实际开发中不建议使用颜色名称来指定颜色。

<style>
    h3 {
        color: red;
    }
<style>    

<h3>夜曲编程</h3>

2. RGB
也就是说，为了更精确地表示颜色，我们会通过具体的数值来最大限度地控制颜色。
接下来，我们先来看看RGB，是如何表示颜色的。
rgb()函数
RGB是red、green、blue的首字母缩写。
rgb()函数，是通过对red、green、blue三原色的强度进行控制，从而实现不同的颜色。
rgb()的语法规则：rgb(red,green,blue)。
这三个参数的取值为0到255的整数，最低值为0，最高值为255。

<style>
    h3 {
        color: rgb(255,0,0);
    }
</style>

<h3>夜曲编程</h3>

部分RGB
红，绿，蓝三原色叠加，组合起来有1600多万种不同的颜色。
我们了解几种常见的颜色，更多复杂的颜色使用时再查询即可。

3.十六进制码
CSS中，除了使用RGB定量地表示颜色，还有一种常见的表达方法--十六进制码。
十六进制码，是以#开头的6位十六进制数表示颜色的方式。其语法规则为：#FF0000。
这个6位数可以分为三组，依次对应red、green、blue三种颜色的强度。
每组两位数，最低值为00，最高值为FF。
比如#FF0000的FF表示red的强度，00表示green的强度，后一组00表示blue的强度。
<style>
    h3 {
        color: #FF0000;
    }
</style>

<h3>夜曲编程</h3>

部分十六进制码
十六进制码大小写都可以。
同样的，我们不需要记住太多十六进制码。
有很多网页工具提供了不同颜色的十六进制码。

十六进制码的简写
使用十六进制码表示颜色时，如果每组的两个十六进制数是相同的。
例如 #FF0000、#FFFFFF、#AABBCC，则可以将它们简写#F00、#FFF、#ABC。
<style>
    h3 {
        color: #F00;
    }
</style>
 
<h3>夜曲编程</h3>

背景颜色
除了字体颜色外，在制作网页时我们往往会在网页中添加一些背景颜色让网页更加美观，吸引访问者的眼球。
我们设置字体颜色时，使用color属性。
而设置背景颜色，则使用background-color属性，属性值同样可以使用颜色名称、RGB和十六进制码。
第6-9行，通过RGB的方式，给h3元素设置背景颜色为：rgb(255,176,51)
第11-14行，通过十六进制码的方式，给p元素设置背景颜色为：#5E80F4
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        h3 {
            /* 给h3元素，设置背景颜色为rgb(255,176,51) */
            background-color: rgb(255,176,51);
        }
        
        p {
            /* 给p元素，设置背景颜色#5E80F4 */
            background-color: #5E80F4;
        }
    </style>
</head>
<body>
    <h3>夜曲编程</h3>
    <p>网页开发基础</p>
</body>
</html>

CSS中，常见设置颜色值的方法有三种：颜色名称、RGB、 十六进制码。
颜色名称，使用颜色的英文名；
RGB，使用rgb()函数，格式为rgb(red,green,blue)
十六进制码，使用#开头的6位十六进制数。
注意，颜色名称最为简单，但是不同的浏览器，对颜色的解析可能存在差异。

除了前面的颜色样式外，字体样式和文本样式也是网页设计中的重要组成部分。
合适的字体和文本排版，不仅可以使页面更加美观，也可以提升用户体验。
接下来，我们先来看看CSS如何设置字体样式。

CSS设置字体样式的属性有很多。
比如，更改字体类型、控制字体风格、控制字体大小和粗细等等。
因为字体英文为font，所以四个属性都是以font开头。

同时设置了字体样式的四个属性：字体类型、字体风格 、字体粗细和字体大小。
<style>
    /* css设置字体样式 */
    p {
        font-family: serif;
        font-style: italic;
        font-weight: bold;
        font-size: 30px;
    }
</style>

<p>网页开发基础</p>

字体类型
font-family 属性，用于设置字体类型。
第4行，设置字体类型为serif，它是网页设计中最常用的字体族之一。还有一种常用的为sans-serif。
<style>
    /* css设置字体类型 */
    p {
        font-family: serif;
    }
</style>
    
<p>font-family属性，用于设置字体类型</p>

字体风格
font-style属性，用于设置字体风格。
第4行，设置字体风格为italic，它表示字体以斜体显示。

字体粗细
font-weight属性，用于设置字体粗细。
第4行，设置字体粗细为bold，表示字体为粗体。
注意，font-weight属性的值，也可以数值表示，数值一般在100到900之间，100最细，900最粗。

字体大小
font-size属性，用于设置字体的大小。
第4行，设置字体大小为30px，表示字体大小为30像素。
px表示像素，是常用的长度单位，像素值越大，字体就越大。
当涉及到和长度有关的属性值时，我们推荐使用像素px这种长度单位来表示。

字体类型扩展
我们通常设置font-family 属性时，会使用几种字体名称作为一种"备选"机制。
字体间以逗号隔开，如果浏览器不支持第一种字体，它将依次尝试下一种。
并且，字体名称中包含空格时，则必须用引号包裹起来，例如"Times New Roman"

<style>
    /* css设置字体类型 */
    p {
        font-family:"Times New Roman" ,serif;
    }
</style>

font属性
font是字体的英文，所以font属性可以设置所有的字体样式。
通过font属性设置多个属性时，有严格的先后顺序。
牢记，字体大小和字体类型是必须设置的，并且字体类型放在最后。
这里，我们只设置font-size和font-family两个属性的值，其余属性会自动使用默认值。
<style>
    /* 使用标签选择器，通过font属性设置p元素的字体样式 */
    p {
        font: 30px serif;
    }
</style>

<p>font属性的用法</p>

这里一定需要注意，不同的属性值之间使用空格间隔。
比如字体大小的值30px和字体类型的值serif中间有一个空格。

设置字体样式时，有常用的四个属性：
字体类型font-family，常用字体类型为serif；
字体风格font-style，常使用italic设置字体倾斜；
字体粗细font-weight，粗体可以设置为bold，粗细也可以用100到900的数值表示；
字体大小font-size，设置字体大小为数字，紧跟长度单位，单位常用像素px。

除了字体样式，在网页设计中，文本样式也是重要的组成部分。
设置文本样式就是将﻿文本进行合理的排版。
接下来，我们来学习文本样式。

和Word文档类似，我们可以通过CSS中的文本属性来设置文本的对齐方式、缩进等等。
在这里，我们将重点学习文本水平对齐、文本缩进、文本修饰、行高这四个属性。

代码的作用
同时设置了文本样式的四个属性：文本水平对齐、文本缩进 、文本修饰和行高。
<style>
    /* css设置文本样式 */
    p {
        text-align: center;
        text-indent: 32px;
        text-decoration: underline;
        line-height: 32px;
    }
</style>
    
<p>夜曲编程</p>
<p>网页开发</p>

文本对齐
text-align 属性，用于设置文本的水平对齐方式。 
第4行，设置水平对齐方式为center，它表示文本居中对齐。
常见的还有右对齐right，和默认的对齐方式左对齐left。

文本缩进
text-indent属性，用于指定文本的首行缩进，通常是将段落元素p的首行缩进。 
第4行，设置文本缩进的长度为32px，即32像素。
当涉及到和长度有关的属性值时，我们推荐使用像素px这种长度单位来表示。

文本修饰
text-decoration属性，用于为文本添加修饰。
第4行，设置属性值为underline，表示给文本添加下划线。
常见的还有上划线overline，和删除线line-through。
最常用的做法就是，设置text-decoration : none ; ，来清除<a>标签的默认下划线。

行高
line-height属性，用于设置文本的行高。
第4行，设置行高为32px，表示行高固定为32像素。
当涉及到和长度有关的属性值时，我们推荐使用像素px这种长度单位来表示。

删除下划线
前面，我们提到文本修饰属性text-decoration还有一种最常用的用法：清除<a>标签的默认下划线。
第4行，设置属性text-decoration: none;，清除了链接默认的下划线。
<style>
    /* css通过文本修饰属性删除链接的下划线 */
    a {
        text-decoration: none;
    }
</style>
<a href="https://np.baicizhan.com/">夜曲编程</a>

类似于32px的这种方式，是采用数字和长度单位的方式来表示行高。
其实，行高还可以是单独的数字，数字表示字体大小的倍数。
比如p元素的字体大小为16px，则设置line-height: 3，表示行高为字体大小的3倍，为48px。
<style>
    /* 类选择器设置文本行高 */
    .big {
        line-height: 3;
    }
</style>

<p>这是默认的标准行高<br>这是默认的标准行高</p>
<p class="big">这是较大的行高<br>这是较大的行高</p>

设置文本样式时，有常用的四个属性：
文本水平对齐 text-align，默认值为左对齐left，常用的还有右对齐right，居中对齐center；
文本缩进text-indent，用于指定文本的首行缩进，通常是将段落元素p的首行缩进；
文本修饰text-decoration，最常用的是设置值为none，来清除<a>标签的默认下划线，也可以给指定元素设置下划线，上划线、删除线等效果；
行高line-height，用于设置文本的行高，可以是数字和长度单位，比如32px；也可以是单独数字，比如3，表示为默认行高的3倍。

字体大小属性：font-size
字体粗细属性：font-weight
字体类型属性：font-family
文本对齐方式属性：text-align
行高属性：line-height
